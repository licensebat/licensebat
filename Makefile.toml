[tasks.spdx]
workspace = false
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! askalono = "0.4.3"
//! ```
use askalono::Store;
use std::{fs::File, path::Path};

const LICENSE_CACHE: &str = "./licensebat-cli/license-cache.bin.zstd";
const SPDX_PATH: &str = "./datasets/modules/spdx-license-list-data/json/details";

fn main() {
    let root = Path::new(env!("CARGO_MAKE_WORKING_DIRECTORY"));
    let cache_path = root.join(LICENSE_CACHE);
    if cache_path.exists() {
        println!("The cache file already exists. Avoiding rebuild.");
        return;
    }

    let spdx_path = root.join(SPDX_PATH);
    let mut store = Store::new();
    store
        .load_spdx(spdx_path.as_path(), true)
        .expect("Couldn't create a store from SPDX data. Have submodules been initialized?");

    let mut cache = File::create(&cache_path).expect("Couldn't open the cache file");
    store
        .to_cache(&mut cache)
        .expect("Couldn't write the cache file");

    println!("License cache created at: {:?}", cache_path);
}
'''

[tasks.watch-pro]
workspace = false
command = "cargo"
watch = true
args = ["run", "--manifest-path", "./licensebat-cli/Cargo.toml", "--release"]

[tasks.watch-dev]
workspace = false
command = "cargo"
watch = true
args = ["run", "--manifest-path", "./licensebat-cli/Cargo.toml"]

[tasks.udeps]
workspace = false
install_crate = "udeps"
toolchain = "nightly"
command = "cargo"
args = ["udeps", "--all-targets"]

[tasks.format]
clear = true
workspace = false
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.clippy-z]
clear = true
workspace = false
install_crate = "cargo-clippy"
toolchain = "nightly"
command = "cargo"
args = ["clippy", "-Z", "unstable-options"]

[tasks.clippy]
workspace = false
install_crate = "cargo-clippy"
command = "cargo"
args = ["clippy"]

[tasks.clippy-pedantic]
workspace = false
install_crate = "cargo-clippy"
command = "cargo"
args = ["clippy", "--all", "--", "-D", "clippy::pedantic", "-D", "clippy::nursery", "-D", "warnings"]

[tasks.test-integration]
workspace = false
command = "cargo"
args = ["test", "--test", "integration_*"]

[tasks.test-unit]
workspace = false
command = "cargo"
args = ["test", "--lib", "--bins"]

[tasks.test-all]
workspace = false
run_task = [
    { name = ["test-unit", "test-integration"] },
]

[tasks.all]
dependencies = [
    "check",
    "format",
    "clippy",
    "test-all"
]
